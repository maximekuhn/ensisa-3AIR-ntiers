@page "/login-secrete"
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="navbar">
    <ul class="ul-navbar">
        <li>
            <a id="home-link" class="active-green" href="/">
                <i class="fas fa-home"></i>
            </a>
        </li>
        <p id="titleLogo"><span id="bleu">JeBalance</span><span id="gris">.gouv</span>.fr</p>
        <img id="logo" src="/favicon.ico" alt="Home"/>
    </ul>
</div>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Connexion</h3>
        </div>
        <div class="mb-3">
            <label>Email</label>
            <input @bind="model.Email" class="form-control" placeholder="Email"/>
        </div>
        <div class="mb-3">
            <label>Mot de passe</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Mot de passe"/>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Connexion</button>
        </div>
    </div>
</div>

@code {

    private class Model
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userSession = await userAccountService.LoginSecreteAsync(model.Email, model.Password);
        if (userSession == null)
        {
            await js.InvokeVoidAsync("alert", "Connexion échouée, vérifier le pseudo et le mot de passe");
            return;
        }

        var customASP = (CustomAuthenticationStateProvider)authStateProvider;
        await customASP.UpdateAuthenticationState(userSession);
        navManager.NavigateTo("/get-all-vip", true);
    }

}