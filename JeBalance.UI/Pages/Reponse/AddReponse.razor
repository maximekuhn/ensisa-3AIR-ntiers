@page "/repondre/{denonciationId:guid}"
@using ReponseCreateAPI = JeBalance.API.Interne.Securisee.Resources.ReponseCreateAPI
@using JeBalance.UI.Data.Services.InterneAPI
@attribute [Authorize(Roles = "AdministrateurFiscale")]
@inject ReponseServices ServiceReponse
@inject IJSRuntime js
@inject NavigationManager NavigationManager

<h2>Répondre à la dénonciation</h2>


<EditForm Model="@reponse" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>

    <div class="form-group">
        <label>Type de Réponse</label>
        <InputSelect class="form-control" id="typeDelit" @bind-Value="reponse.TypeReponse">
            @foreach (var repType in Enum.GetValues(typeof(TypeReponse)))
            {
                <option value="@repType">@repType</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Rétribution (si applicable)</label>
        <InputNumber @bind-Value="reponse.Retribution" class="form-control" min="0"/>
    </div>

    <button type="submit">Répondre</button>
</EditForm>


@code {

    [Parameter]
    public Guid denonciationId { get; set; }

    public ReponseCreateAPI reponse = new();

    private async Task HandleValidSubmit()
    {
        var requestResult = await ServiceReponse.AddReponseAsync(
            denonciationId, reponse);

        if (requestResult.Errormessage != null)
        {
            await js.InvokeVoidAsync("alert", $"{requestResult.Errormessage}");
        }
        else
        {
        NavigationManager.NavigateTo("/list-denonciation");
            
        }
    }

}