@page "/list-denonciation"
@attribute [Authorize(Roles = "AdministrateurFiscale")]
@inject AuthenticationStateProvider authStateProvider
@using JeBalance.UI.Data.Services.InterneAPI
@using DenonciationGetAPI = JeBalance.API.Interne.Securisee.Resources.DenonciationGetAPI
@inject DenonciationServices ServiceDenonciation
@inject NavigationManager NavigationManager

<div class="navbar">
    <ul class="ul-navbar">
        <li>
            <a id="home-link" class="active-green" href="/">
                <i class="fas fa-home"></i>
            </a>
        </li>
        <li>
            <a id="create-link" href="list-denonciation">LISTE DENONCIATION</a>
        </li>
        <li>
            <a id="logout-secrete-button" @onclick="Logout" class="nav-link">
                <i class="fas fa-sign-out-alt"></i>
            </a>
        </li>
        <p id="titleLogo"><span id="bleu">JeBalance</span><span id="gris">.gouv</span>.fr</p>
        <img id="logo" src="/favicon.ico" alt="Home"/>
    </ul>
</div>

<h2>Liste des dénonciations non traitées</h2>

@if (denonciations == null)
{
    <p>
        <em>Chargement...</em>
    </p>
}
else if (denonciations.Length == 0)
{
    <p>
        <em>Aucune dénonciation non traitée.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Type de Délit</th>
            <th>Pays d'Évasion</th>
            <th>Nom du Suspect</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var denonciation in denonciations)
        {
            <tr>
                <td>@denonciation.TypeDelit</td>
                <td>@denonciation.PaysEvasion</td>
                <td>@denonciation.Suspect.Nom @denonciation.Suspect.Prenom</td>
                <td class="text-center">
                    <button @onclick="() => NavigateToReponse(denonciation.Id)" type="button">Répondre</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private DenonciationGetAPI[] denonciations;

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        denonciations = await ServiceDenonciation.GetDenonciationNonTraiteeAsync(10, 0);
    }

    private void NavigateToReponse(Guid denonciationId)
    {
        NavigationManager.NavigateTo($"/repondre/{denonciationId}");
    }
    
    private async Task Logout()
    {
        var customASP = (CustomAuthenticationStateProvider)authStateProvider;
        await customASP.UpdateAuthenticationState(null);
        NavigationManager.NavigateTo("/login-interne", true);
    }

}